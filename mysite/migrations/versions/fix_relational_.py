"""empty message

Revision ID: fix_relational
Revises: start
Create Date: 2019-10-15 14:57:01.462914

"""
from alembic import op
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = 'fix_relational'
down_revision = 'start'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()


def upgrade_():
    pass


def downgrade_():
    pass


def upgrade_anode():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("ALTER TABLE anode.user_labelprojects ADD COLUMN id INT(11) NOT NULL AFTER project_id;")
    op.execute("""ALTER TABLE `anode`.`user_labelprojects` 
CHANGE COLUMN `user_id` `user_id` INT(11) NULL ,
CHANGE COLUMN `project_id` `project_id` INT(11) NULL ,
CHANGE COLUMN `id` `id` INT(11) NOT NULL AUTO_INCREMENT ,
DROP PRIMARY KEY,
ADD PRIMARY KEY (`id`);
;""")

    # op.add_column('user_labelprojects', sa.Column('id', sa.Integer(), nullable=False))
    #
    # op.alter_column('user_labelprojects', 'project_id',
    #                 existing_type=mysql.INTEGER(display_width=11),
    #                 nullable=True)
    # op.alter_column('user_labelprojects', 'user_id',
    #                 existing_type=mysql.INTEGER(display_width=11),
    #                 nullable=True)
    # ### end Alembic commands ###


def downgrade_anode():
    op.execute("""ALTER TABLE `anode`.`user_labelprojects` 
DROP COLUMN `id`,
CHANGE COLUMN `user_id` `user_id` INT(11) NOT NULL ,
CHANGE COLUMN `project_id` `project_id` INT(11) NOT NULL ,
DROP PRIMARY KEY,
ADD PRIMARY KEY (`user_id`, `project_id`);
;""")
